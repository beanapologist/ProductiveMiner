version: '3.8'

services:
  # Adaptive Learning Blockchain Node (Ganache for Development)
  adaptive-node:
    image: trufflesuite/ganache:latest
    platform: linux/amd64
    container_name: adaptive-blockchain-node
    ports:
      - "8545:8545"
    command: >
      --server.host 0.0.0.0 
      --server.port 8545 
      --chain.networkId 9999 
      --wallet.mnemonic "productive miner blockchain network custom token MINED exchange ready" 
      --miner.blockTime 15 
      --miner.blockGasLimit 8000000 
      --wallet.totalAccounts 10

  # Adaptive Learning Application
  adaptive-app:
    build:
      context: .
      dockerfile: Dockerfile.adaptive
    platform: linux/amd64
    container_name: adaptive-app
    ports:
      - "3002:3000"
    volumes:
      - ./data/app:/app/data
      - ./logs:/app/logs
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - TESTNET_MODE=true
      - MAX_CONCURRENT_SESSIONS=50
      - DEFAULT_DIFFICULTY=25
      - BLOCK_TIME_SECONDS=30
      - MAX_MINING_SESSIONS_PER_IP=10
      - JWT_SECRET=testnet_jwt_secret_please_change_this_in_production
      - ENCRYPTION_KEY=testnet_32_byte_encryption_key_change_this
      - LOG_LEVEL=info
      - ENABLE_DEBUG_LOGS=true
      - METRICS_ENABLED=true
      - ENABLE_ALL_WORK_TYPES=true
      - QUANTUM_SECURITY_LEVEL=256
      - BLOCKCHAIN_URL=http://localhost:8545
    depends_on:
      - adaptive-node
      - adaptive-db
      - adaptive-redis

  # Adaptive Learning Frontend
  adaptive-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: linux/amd64
    container_name: adaptive-frontend
    ports:
      - "3004:80"
    volumes:
      - ./data/frontend:/app/data
    environment:
      - REACT_APP_API_URL=http://adaptive-app:3000
    depends_on:
      - adaptive-app

  # PostgreSQL Database
  adaptive-db:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: adaptive-db
    ports:
      - "5432:5432"
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - ./data/backups/database:/backups
    environment:
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_pass
    command: postgres -c shared_preload_libraries=pg_stat_statements

  # Redis Cache
  adaptive-redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: adaptive-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx Reverse Proxy
  adaptive-nginx:
    image: nginx:alpine
    platform: linux/amd64
    container_name: adaptive-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/adaptive.conf:/etc/nginx/nginx.conf
      - ./data/nginx/logs:/var/log/nginx
    depends_on:
      - adaptive-app
      - adaptive-frontend

  # Prometheus Monitoring
  adaptive-metrics:
    image: prom/prometheus:latest
    platform: linux/amd64
    container_name: adaptive-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/etc/prometheus/console_libraries
      --web.console.templates=/etc/prometheus/consoles
      --storage.tsdb.retention.time=200h
      --web.enable-lifecycle

  # Grafana Dashboard
  adaptive-monitor:
    image: grafana/grafana:latest
    platform: linux/amd64
    container_name: adaptive-monitor
    ports:
      - "3003:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - adaptive-metrics

  # Backup Service
  adaptive-backup:
    image: postgres:15-alpine
    platform: linux/amd64
    container_name: adaptive-backup
    volumes:
      - ./data/backups:/backups
      - ./scripts/backup:/scripts
    environment:
      - POSTGRES_DB=adaptive_learning
      - POSTGRES_USER=adaptive_user
      - POSTGRES_PASSWORD=adaptive_pass
    command: >
      sh -c "
        while true; do
          sleep 86400;
          sh /scripts/backup.sh;
        done
      "
    depends_on:
      - adaptive-db

volumes:
  adaptive-node-logs:

networks:
  default:
    name: adaptive-network 